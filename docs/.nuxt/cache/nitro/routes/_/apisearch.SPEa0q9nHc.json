{"expires":1741036316208,"value":{"code":200,"headers":{"etag":"W/\"wtoCuAt7eA\"","last-modified":"Mon, 03 Mar 2025 21:11:55 GMT"},"body":[{"id":"content:0.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     Start Your Vekos Journey Here.   Alpha v0.0.1    Vekos  is a   Rust -based OS with built-in cryptographic verification, ensuring security, integrity, and   tamper-proof  computing.      Verified Operations : Cryptographic verification for filesystem and memory operations   Secure Memory Management : Buddy allocator with memory zones and COW support   Modern Shell : Basic shell with command history and line editing   Verified Filesystem (VKFS) : Merkle tree-backed filesystem for integrity   Process Management : Basic process scheduling and signals   Hardware Support : x86_64 architecture with GDT, IDT, and interrupt      What's included      Memory Management   Buddy allocation, page table management, memory zones (DMA, Normal, HighMem), COW support, and memory pressure handling.    Filesystem   Basic filesystem operations with Merkle tree verification, buffer cache system, and inode management.    Process Management   Process creation, scheduling, signal handling, and management of process groups and sessions.    Program Execution   Basic program execution using SYSCALL/SYSRET.    Shell   Command history, line editing, basic built-in commands (cd, ls, pwd, help, clear), and command parsing with quote handling.    Security Features   Cryptographic operation verification, state transition validation, memory isolation, and privilege levels."},{"id":"content:1.introduction:1.getting-started.md","path":"/introduction/getting-started","dir":"introduction","title":"Getting Started","description":"Get Vekos up and running on your machine in just a few steps.","keywords":["Clone the Repository","Install Rust Toolchain","Build Vekos","Run Vekos"],"body":"  Getting Started  Get Vekos up and running on your machine in just a few steps.  Clone the Repository  Start by cloning the Vekos repository:     git   clone   https://github.com/JGiraldo29/vekos.git\n   cd   vekos\n  Install Rust Toolchain  Make sure you have the latest Rust toolchain installed. If not, install it using:      # Step 1: Go to https://www.rust-lang.org/tools/install\n   # Select either the 32-bit or 64-bit (depending on your system architecture)\n   \n   # Step 2: Open the .exe file and go along with the standard installation\n   \n   # Step 3: Verify Rust installation in the terminal with:\n   rustc   --version\n   \n   # Troubleshooting:\n   # If Rust is not recognized, add this to your PATH \"C:\\Users\\YourUsername\\.cargo\\bin\"\n     # Open the terminal and paste the command below:\n   curl   --proto   '=https'   --tlsv1.2   -sSf   https://sh.rustup.rs   |   sh\n   # (make sure you proceed with default installation)\n   \n   # Verify Rust installation with:\n   rustc   --version\n     # Open the terminal and paste the command below:\n   curl   --proto   '=https'   --tlsv1.2   -sSf   https://sh.rustup.rs   |   sh\n   # (make sure you proceed with default installation)\n   \n   # Add the Rust toolchain directory to the PATH environment variable:\n   source   $HOME  /.cargo/env\n   \n   # Verify Rust installation with:\n   rustc   --version\n  Then, add the required Rust components:     rustup   component   add   rust-src\n   rustup   component   add   llvm-tools-preview\n  Build Vekos  To build the kernel, run the following:     cargo   build\n  Run Vekos  Vekos requires   QEMU  and   bootimage  to run.  To install QEMU, run the following commands:      # Step 1: Go to https://qemu.weilnetz.de/w64/\n   # Download the topmost .exe file (usually after the folders)\n   \n   # Step 2: Open the .exe file and go along with the standard installation\n   \n   # Step 3: Go to https://www.msys2.org/ and click on the .exe file\n   \n   # Step 4: Go through the default installation and click Finish at the end to open the terminal\n   \n   # Type the following command so you can compile and manage the project:\n   pacman   -S   mingw-w64-ucrt-x86_64-gcc\n   pacman   -S   mingw-w64-ucrt-x86_64-qemu\n     # For Homebrew:\n   brew   install   qemu\n   \n   # For MacPorts:\n   sudo   port   install   qemu\n     # Arch:\n   pacman   -S   qemu\n   \n   # Debian/Ubuntu:\n   apt-get   install   qemu-system\n   \n   # Fedora:\n   dnf   install   @virtualization\n   \n   # Gentoo:\n   emerge   --ask   app-emulation/qemu\n   \n   # RHEL/CentOS:\n   yum   install   qemu-kvm\n   \n   # SUSE:\n   zypper   install   qemu\n  To install bootimage, run the following command:     cargo   install   bootimage\n  Then, you can run Vekos with:     cargo   run\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.introduction:2.project-structure.md","path":"/introduction/project-structure","dir":"introduction","title":"Project Structure","description":"Vekos as clean structure making it easy for you to find what you want to work on or use.","keywords":["Directory Structure"],"body":"  Project Structure  Vekos as clean structure making it easy for you to find what you want to work on or use.  Directory Structure  The directory structure can be also seen on   Github     vekos/\n     .cargo/\n       config.toml\n     .idea/\n       --ConfigFiles--\n     assets/\n       font8x16.bin\n     docs/\n       --DocumentationFiles--\n     programs/\n       VETests\n     src/\n       --MainCode--\n     .gitignore\n     Cargo.lock\n     Cargo.toml\n     LICENSE\n     README.md\n     rust-toolchain\n     rust-toolchain.txt\n     x86_64-vekos.json\n  The   .cargo/  directory is where Cargo stores   configuration files .  The   assets/  directory is used to   store static resources  or   files that are necessary  for the operation or presentation of the operating system.  The   docs/  directory stores all of the   documentation .  The   programs/  directory is used to store   unit tests ,   integration tests , and other testing utilities to verify the correctness and stability of the Vekos operating system.  The   src/  directory contains all the   Kernal Code ,   System Calls , Drivers and Hardware Interaction,   Shell  and Command Processing,   Cryptographic  Operations, Utilities and Helpers.  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.introduction:3.contributing.md","path":"/introduction/contributing","dir":"introduction","title":"Contributing","description":"VEKOS is in its early stages and welcomes contributions. Here are some areas where you can help:","keywords":["Contributing Guidelines"],"body":"  Contributing  VEKOS is in its early stages and welcomes contributions. Here are some areas where you can help:     1. Core Features     Expanding filesystem capabilities    Improving process scheduling    Adding device drivers    Enhancing memory management     2. Documentation     Code documentation    Architecture documentation    User guides     3. Testing     Unit tests    Integration tests    Performance benchmarks     4. Bug Fixes     Report issues    Submit pull requests    Help with code review  Contributing Guidelines  Vekos has some rules when it comes to contributing to the community   Fork the repository  Create a feature branch  Write clean, documented code  Ensure all tests pass  Submit a pull request"},{"id":"content:1.introduction:4.next-steps.md","path":"/introduction/next-steps","dir":"introduction","title":"Next Steps","description":"","keywords":[],"body":"  Next Steps  Known Limitations:  As this is an alpha release (0.0.1), there are several limitations:   Limited hardware support  Basic device driver support  Experimental verification system  Limited filesystem features  Basic shell functionality  Unsecure code  Future Plans:   Extended hardware support  Network stack implementation  Enhanced security features  GUI support  Extended system calls  Improved documentation  License:  Apache-2.0 license  Acknowledgments:   The Rust programming language team  Contributors to the project  Contact:   jgiraldonocua@gmail.com   VEKOS is currently in   alpha stage (0.0.1) . While it demonstrates core functionality, it   should not be used in production environments . This is an experimental system focused on exploring verification techniques in operating system design."},{"id":"content:2.user-guide:1.empty.md","path":"/user-guide/empty","dir":"user-guide","title":"Under Construction","description":"","keywords":[],"body":"  Under Construction    The user guide is in development.   To contribute,   click me"},{"id":"content:3.dev:1.components.md","path":"/dev/components","dir":"dev","title":"Components","description":"Discover every component you can use in your content.","keywords":["<Alert />","<Badge />","<BlockHero />","<ButtonLink />","<Callout />","<Card />","<CardGrid />","<CodeGroup />","<CodeBlock />","<CopyButton />","<Icon />","<List />","<Sandbox />","<Terminal />","<VideoPlayer />"],"body":"  Components  Discover every component you can use in your content.   <Alert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     <Badge />   <Badge />  support same types as   <Alert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     <BlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     <ButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     <Callout />   <Callout />  support same types as   <Alert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     <Card />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     <CardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     <CodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     <CodeBlock />  To be used inside a   <CodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `<CodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     <CopyButton />        :copy-button{content=\"hey!\"}\n     <Icon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     <List />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    <Sandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     <Terminal />        :terminal{content=\"nuxi build\"}\n     <VideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"}]},"mtime":1741036315214,"integrity":"D8MR1WT0Ow"}