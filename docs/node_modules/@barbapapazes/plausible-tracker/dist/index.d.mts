interface Plausible {
    options: PlausibleOptions;
    /**
     * Send a custom event.
     *
     * @param eventName - The event name
     * @param options - The event options
     */
    trackEvent: (eventName: EventName, options?: EventOptions) => void;
    /**
     * Send a pageview event.
     *
     * @param options - The event options
     */
    trackPageview: (options?: EventOptions) => void;
}
type EventName = 'pageview' | 'Outbound Link: Click' | 'File Download' | string & Record<never, never>;
interface PlausibleOptions {
    /**
     * Enable or disable tracker.
     *
     * @default true
     */
    readonly enabled: boolean;
    /**
     * If true, pageviews will be tracked when the URL hash changes.
     * Enable this if you are using a frontend that uses hash-based routing.
     *
     * @default false
     */
    readonly hashMode: boolean;
    /**
     * The domain to bind the event to.
     *
     * @default location.hostname
     */
    readonly domain: Location['hostname'];
    /**
     * The API host where the events will be sent.
     *
     * @default 'https://plausible.io'
     */
    readonly apiHost: string;
    /**
     * Hostnames to ignore. Useful for development environments.
     *
     * @default ['localhost']
     */
    readonly ignoredHostnames: string[];
    /**
     * If `ignoredHostnames` should be used as suffixes.
     * This means that `example.com` will also ignore `sub.example.com`.
     *
     * @default false
     */
    readonly ignoreSubDomains: boolean;
    /**
     * Log events to the console when ignored.
     *
     * @default false
     */
    readonly logIgnored: boolean;
}
interface CallbackArgs {
    readonly status: number | null;
}
interface EventOptions extends EventProps, EventRevenue {
    data?: Partial<EventData>;
    /**
     * Callback to be called after the event is sent.
     */
    callback?: (args: CallbackArgs) => void;
}
/**
 * Shape of the event options
 */
interface EventProps {
    /**
     * Properties to be bound to the event.
     */
    readonly props?: {
        readonly [propName: string]: string | number | boolean;
    };
}
/**
 * Shape of the event revenue
 */
interface EventRevenue {
    /**
     * Revenue data to be bound to the event.
     */
    readonly revenue?: {
        /**
         * The currency of the revenue (ISO 4217).
         */
        readonly currency: string;
        /**
         * The amount of the revenue.
         */
        readonly amount: string | number;
    };
}
/**
 * Shape of the event data
 */
interface EventData {
    /**
     * The URL to bind the event to.
     *
     * @default location.href
     */
    readonly url: Location['href'];
    /**
     * The referrer to bind the event to.
     *
     * @default document.referrer
     */
    readonly referrer: Document['referrer'] | null;
    /**
     * The current device's width.
     *
     * @default window.innerWidth
     */
    readonly deviceWidth: Window['innerWidth'];
}
/**
 * Shape of the event payload
 *
 * @internal
 */
interface EventPayload {
    readonly n: string;
    readonly u: Location['href'];
    readonly d: Location['hostname'];
    readonly r: Document['referrer'] | null;
    readonly w: Window['innerWidth'];
    readonly h: 1 | 0;
    readonly p?: string;
    readonly m?: string;
    readonly $?: EventRevenue['revenue'];
}

/**
 * Inspired by official Plausible Tracker.
 * @see https://github.com/plausible/analytics/blob/master/tracker/src/customEvents.js#L77
 */

/**
 * Create a Plausible tracker.
 * It's a minimal core. Extensions can be used to add more features.
 *
 * @param initOptions - Initial options
 * @returns Plausible tracker
 */
declare function createPlausibleTracker(initOptions?: Partial<PlausibleOptions>): {
    trackEvent: (eventName: EventName, options?: EventOptions) => Promise<void> | undefined;
    trackPageview: (options?: EventOptions) => Promise<void> | undefined;
    options: {
        enabled: boolean;
        hashMode: boolean;
        domain: Location["hostname"];
        apiHost: string;
        ignoredHostnames: string[];
        ignoreSubDomains: boolean;
        logIgnored: boolean;
    };
};

export { type CallbackArgs, type EventData, type EventName, type EventOptions, type EventPayload, type EventProps, type EventRevenue, type Plausible, type PlausibleOptions, createPlausibleTracker };
