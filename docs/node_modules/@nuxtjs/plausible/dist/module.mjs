import { defineNuxtModule, useLogger, createResolver, addServerHandler, addImports, addPlugin } from '@nuxt/kit';
import { defu } from 'defu';
import { withLeadingSlash, joinURL } from 'ufo';

const name = "@nuxtjs/plausible";
const version = "1.2.0";

const DEFAULT_HOSTNAMES = ["localhost"];
const module = defineNuxtModule({
  meta: {
    name,
    version,
    configKey: "plausible",
    compatibility: {
      nuxt: ">=3"
    }
  },
  defaults: {
    enabled: true,
    hashMode: false,
    domain: "",
    ignoredHostnames: void 0,
    ignoreSubDomains: false,
    trackLocalhost: void 0,
    apiHost: "https://plausible.io",
    autoPageviews: true,
    autoOutboundTracking: false,
    logIgnoredEvents: false,
    proxy: false,
    proxyBaseEndpoint: "/_plausible"
  },
  setup(options, nuxt) {
    const logger = useLogger("plausible");
    const { resolve } = createResolver(import.meta.url);
    options.ignoredHostnames ??= [...DEFAULT_HOSTNAMES];
    options.ignoredHostnames = Array.from(new Set(options.ignoredHostnames));
    if (options.trackLocalhost !== void 0) {
      logger.warn("The `trackLocalhost` option has been deprecated. Please use `ignoredHostnames` instead.");
    } else if (options.trackLocalhost) {
      options.ignoredHostnames = options.ignoredHostnames.filter(
        (domain) => domain !== "localhost"
      );
    }
    nuxt.options.runtimeConfig.public.plausible = defu(
      nuxt.options.runtimeConfig.public.plausible,
      options
    );
    nuxt.options.build.transpile.push(resolve("runtime"));
    if (nuxt.options.runtimeConfig.public.plausible.proxy) {
      const proxyBaseEndpoint = withLeadingSlash(nuxt.options.runtimeConfig.public.plausible.proxyBaseEndpoint);
      const hasUserProvidedProxyBase = [...nuxt.options.serverHandlers, ...nuxt.options.devServerHandlers].some((handler) => handler.route?.startsWith(proxyBaseEndpoint));
      if (hasUserProvidedProxyBase) {
        throw new Error(`The route \`${proxyBaseEndpoint}\` is already in use. Please use the \`proxyBaseEndpoint\` option to change the base URL of the proxy endpoint.`);
      }
      addServerHandler({
        route: joinURL(proxyBaseEndpoint, "api/event"),
        handler: resolve("runtime/server/event-handler"),
        method: "post"
      });
    }
    addImports(
      ["useTrackEvent", "useTrackPageview"].map((name2) => ({
        name: name2,
        as: name2,
        from: resolve(`runtime/composables/${name2}`)
      }))
    );
    addPlugin({
      src: resolve("runtime/plugin.client"),
      mode: "client"
    });
    if (options.autoPageviews) {
      addPlugin({
        src: resolve("runtime/plugin-auto-pageviews.client"),
        mode: "client",
        order: 1
      });
    }
    if (options.autoOutboundTracking) {
      addPlugin({
        src: resolve("runtime/plugin-auto-outbound-tracking.client"),
        mode: "client",
        order: 2
      });
    }
  }
});

export { module as default };
