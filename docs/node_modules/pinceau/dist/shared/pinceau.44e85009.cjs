'use strict';

const process = require('node:process');
const unplugin = require('unplugin');
const MagicString = require('magic-string');
const path = require('pathe');
const consola = require('consola');
const chalk = require('chalk');
const stringify = require('./pinceau.cb478de3.cjs');
require('node:fs');
require('node:fs/promises');
require('jiti');
require('defu');
require('acorn');
const query = require('./pinceau.ea1a11df.cjs');
require('vue/compiler-sfc');
require('recast');
require('recast/parsers/typescript.js');
require('ohash');
require('scule');
const context = require('./pinceau.0a86d563.cjs');
require('vue');
require('style-dictionary-esm');
require('untyped');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const process__default = /*#__PURE__*/_interopDefaultCompat(process);
const MagicString__default = /*#__PURE__*/_interopDefaultCompat(MagicString);
const consola__default = /*#__PURE__*/_interopDefaultCompat(consola);
const chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

const defaultOptions = {
  configFileName: "tokens.config",
  configLayers: [],
  configResolved: (_) => {
  },
  configBuilt: (_) => {
  },
  cwd: process__default.cwd(),
  outputDir: path.join(process__default.cwd(), "node_modules/.vite/pinceau/"),
  preflight: true,
  includes: [],
  excludes: [
    "node_modules/nuxt/dist/",
    "node_modules/@nuxt/ui-templates/",
    "node_modules/@vue/",
    "node_modules/pinceau/",
    ...stringify.outputFileNames
  ],
  followSymbolicLinks: true,
  colorSchemeMode: "media",
  debug: false,
  componentMetaSupport: false,
  runtime: true,
  definitions: true,
  studio: false,
  dev: process__default.env.NODE_ENV !== "production",
  utilsImports: []
};
const pinceau = unplugin.createUnplugin((options) => {
  options = query.merger(options, defaultOptions);
  const { stopPerfTimer } = query.useDebugPerformance("Setup Unplugin", options?.debug);
  query.updateDebugContext({
    debugLevel: options?.dev ? options.debug : false,
    logger: consola__default.withTag(" \u{1F58C} "),
    // chalk.bgBlue.blue
    tag: (value) => chalk__default.bgBlue.blue(value),
    // chalk.blue
    info: (value) => chalk__default.blue(value),
    // chalk.yellow
    warning: (value) => chalk__default.yellow(value),
    // chalk.red
    error: (value) => chalk__default.red(value)
  });
  const ctx = context.usePinceauContext(options);
  stopPerfTimer();
  return {
    name: "pinceau-transforms",
    enforce: "pre",
    vite: {
      config(config) {
        context.registerAliases(config, options);
        context.registerPostCssPlugins(config, options);
      },
      async configResolved(config) {
        await ctx.updateCwd(config.root);
      },
      async configureServer(server) {
        ctx.env = "dev";
        await ctx.ready;
        ctx.setViteServer(server);
      },
      handleHotUpdate(ctx2) {
        const defaultRead = ctx2.read;
        ctx2.read = async function() {
          const code = await defaultRead();
          return context.replaceStyleTs(code, ctx2.file) || code;
        };
      },
      transformIndexHtml: {
        order: "post",
        handler(html) {
          html = html.replace(
            "<pinceau />",
            `<style id="pinceau-theme">${ctx.getOutput(
              "/__pinceau_css.css"
            )}</style>`
          );
          html = html.replace(
            '<style id="pinceau-theme"></style>',
            `<style id="pinceau-theme">${ctx.getOutput(
              "/__pinceau_css.css"
            )}</style>`
          );
          return html;
        }
      }
    },
    transformInclude(id) {
      let toRet;
      const query$1 = query.parsePinceauQuery(id);
      if (options.excludes && options.excludes.some((path) => id.includes(path))) {
        toRet = false;
      }
      if (toRet !== false && options.includes && options.includes.some((path) => id.includes(path))) {
        toRet = true;
      }
      if (toRet !== false && query$1?.transformable) {
        toRet = true;
      }
      if (toRet) {
        ctx.addTransformed(id);
      }
      return toRet;
    },
    transform(code, id) {
      if (!code) {
        return;
      }
      const { stopPerfTimer: stopPerfTimer2 } = query.useDebugPerformance(
        `Transforming ${id}`,
        options.debug
      );
      code = context.replaceStyleTs(code, id);
      const query$1 = query.parsePinceauQuery(id);
      const loc = { query: query$1, source: code };
      const magicString = new MagicString__default(code, { filename: query$1.filename });
      const result = () => {
        stopPerfTimer2();
        const sourceMap = magicString.generateMap();
        sourceMap.file = query$1.filename;
        sourceMap.sources = [query$1.filename];
        return { code: magicString.toString(), map: sourceMap };
      };
      try {
        if (query.JS_EXTENSIONS.includes(query$1.ext)) {
          const transformedCode = context.transformDtHelper(code, ctx);
          magicString.overwrite(0, code.length, transformedCode);
          const sourceMap = magicString.generateMap({ file: query$1.filename, includeContent: true });
          sourceMap.file = query$1.filename;
          sourceMap.sources = [query$1.filename];
          return { code: transformedCode, map: sourceMap };
        }
        if (query$1.styles && !query$1.vue || query$1.type === "style") {
          const transformedCode = context.resolveStyleQuery(code, magicString, query$1, ctx, loc).code;
          magicString.overwrite(0, code.length, transformedCode);
          const sourceMap = magicString.generateMap({ file: query$1.filename, includeContent: true });
          sourceMap.file = query$1.filename;
          sourceMap.sources = [query$1.filename];
          return { code: transformedCode, map: sourceMap };
        }
        code = context.transformVueSFC(code, query$1, magicString, ctx).code;
      } catch (e) {
        query.message("TRANSFORM_ERROR", [id, e]);
        const sourceMap = magicString.generateMap();
        sourceMap.file = query$1.filename;
        sourceMap.sources = [query$1.filename];
        return { code, map: sourceMap };
      }
      return result();
    },
    resolveId(id) {
      return ctx.getOutputId(id);
    },
    load(id) {
      const { stopPerfTimer: stopPerfTimer2 } = query.useDebugPerformance(
        `Load ${id}`,
        options.debug
      );
      const output = ctx.getOutput(id);
      if (output) {
        stopPerfTimer2();
        return output;
      }
      const query$1 = query.parsePinceauQuery(id);
      if (query$1.vue && query$1.type === "style") {
        const vueStyle = context.loadVueStyle(query$1, ctx);
        if (vueStyle) {
          const sourceMap = new MagicString__default(vueStyle, {
            filename: query$1.filename
          }).generateMap({ file: query$1.filename, includeContent: true });
          sourceMap.sources = [query$1.filename];
          sourceMap.file = query$1.filename;
          stopPerfTimer2();
          return {
            code: vueStyle,
            map: sourceMap
          };
        }
      }
      stopPerfTimer2();
    }
  };
});

exports.defaultOptions = defaultOptions;
exports.pinceau = pinceau;
